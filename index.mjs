function noop() {}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function assignTrue(tar, src) {
	for (var k in src) tar[k] = 1;
	return tar;
}

function append(target, node) {
	target.appendChild(node);
}

function insert(target, node, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function setData(text, data) {
	text.data = '' + data;
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = noop;

	this._fragment.d(detach !== false);
	this._fragment = null;
	this._state = {};
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		var handler = handlers[i];

		if (!handler.__calling) {
			try {
				handler.__calling = true;
				handler.call(this, data);
			} finally {
				handler.__calling = false;
			}
		}
	}
}

function flush(component) {
	component._lock = true;
	callAll(component._beforecreate);
	callAll(component._oncreate);
	callAll(component._aftercreate);
	component._lock = false;
}

function get() {
	return this._state;
}

function init(component, options) {
	component._handlers = blankObject();
	component._slots = blankObject();
	component._bind = options._bind;
	component._staged = {};

	component.options = options;
	component.root = options.root || component;
	component.store = options.store || component.root.store;

	if (!options.root) {
		component._beforecreate = [];
		component._oncreate = [];
		component._aftercreate = [];
	}
}

function on(eventName, handler) {
	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	flush(this.root);
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	newState = assign(this._staged, newState);
	this._staged = {};

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		this.fire("state", { changed: changed, current: this._state, previous: oldState });
		this._fragment.p(changed, this._state);
		this.fire("update", { changed: changed, current: this._state, previous: oldState });
	}
}

function _stage(newState) {
	assign(this._staged, newState);
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

var proto = {
	destroy,
	get,
	fire,
	on,
	set,
	_recompute: noop,
	_set,
	_stage,
	_mount,
	_differs
};

/* src/Select.html generated by Svelte v2.15.3 */

function onstate({changed, current, previous}) {
  if (!previous) return;

  if (changed.isFocused) {
    const {isFocused} = current;
    if (isFocused) {
      this.refs.input.focus();
    }
  }
}
function add_css() {
	var style = createElement("style");
	style.id = 'svelte-1rve5x9-style';
	style.textContent = ".container.svelte-1rve5x9{border:1px solid #D8DBDF;border-radius:3px;height:44px;position:relative}.container.svelte-1rve5x9 input.svelte-1rve5x9{border:none;color:#3F4F5F;height:44px;line-height:44px;padding:0 16px;width:100%;background:transparent;font-size:14px;letter-spacing:-0.08px}.container.svelte-1rve5x9 input.svelte-1rve5x9::placeholder{color:#78848F}.container.svelte-1rve5x9 input.svelte-1rve5x9:focus{outline:none}.container.svelte-1rve5x9:hover{border-color:#b2b8bf}.container.focused.svelte-1rve5x9{border-color:#006FE8}.selectedItem.svelte-1rve5x9{padding:0 16px;line-height:44px}.clearSelectedItem.svelte-1rve5x9{position:absolute;right:10px;top:12px;width:20px;height:20px;color:#c5cacf}.clearSelectedItem.svelte-1rve5x9:hover{color:#2c3e50}";
	append(document.head, style);
}

function create_main_fragment(component, ctx) {
	var div, div_class_value;

	function select_block_type(ctx) {
		if (ctx.selectedItem) return create_if_block;
		return create_else_block;
	}

	var current_block_type = select_block_type(ctx);
	var if_block = current_block_type(component, ctx);

	return {
		c() {
			div = createElement("div");
			if_block.c();
			div.className = div_class_value = "container " + (ctx.isFocused ? 'focused' : '') + " svelte-1rve5x9";
		},

		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},

		p(changed, ctx) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if_block.d(1);
				if_block = current_block_type(component, ctx);
				if_block.c();
				if_block.m(div, null);
			}

			if ((changed.isFocused) && div_class_value !== (div_class_value = "container " + (ctx.isFocused ? 'focused' : '') + " svelte-1rve5x9")) {
				div.className = div_class_value;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			if_block.d();
		}
	};
}

// (9:4) {:else}
function create_else_block(component, ctx) {
	var input;

	return {
		c() {
			input = createElement("input");
			input.placeholder = "Placeholder text";
			input.className = "svelte-1rve5x9";
		},

		m(target, anchor) {
			insert(target, input, anchor);
			component.refs.input = input;
		},

		p: noop,

		d(detach) {
			if (detach) {
				detachNode(input);
			}

			if (component.refs.input === input) component.refs.input = null;
		}
	};
}

// (2:4) {#if selectedItem}
function create_if_block(component, ctx) {
	var div0, text0_value = ctx.selectedItem.name, text0, text1, div1;

	return {
		c() {
			div0 = createElement("div");
			text0 = createText(text0_value);
			text1 = createText("\n    ");
			div1 = createElement("div");
			div1.innerHTML = `<svg class="icon svelte-qw6fkp" width="100%" height="100%" viewBox="-2 -2 50 50" focusable="false" role="presentation"><path fill="currentColor" d="M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z"></path></svg>`;
			div0.className = "selectedItem svelte-1rve5x9";
			div1.className = "clearSelectedItem svelte-1rve5x9";
		},

		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, text0);
			insert(target, text1, anchor);
			insert(target, div1, anchor);
		},

		p(changed, ctx) {
			if ((changed.selectedItem) && text0_value !== (text0_value = ctx.selectedItem.name)) {
				setData(text0, text0_value);
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div0);
				detachNode(text1);
				detachNode(div1);
			}
		}
	};
}

function Select(options) {
	init(this, options);
	this.refs = {};
	this._state = assign({}, options.data);
	this._intro = true;

	this._handlers.state = [onstate];

	if (!document.getElementById("svelte-1rve5x9-style")) add_css();

	onstate.call(this, { changed: assignTrue({}, this._state), current: this._state });

	this._fragment = create_main_fragment(this, this._state);

	this.root._oncreate.push(() => {
		this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
	});

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(Select.prototype, proto);

export default Select;

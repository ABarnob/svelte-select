function noop() {}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function assignTrue(tar, src) {
	for (var k in src) tar[k] = 1;
	return tar;
}

function append(target, node) {
	target.appendChild(node);
}

function insert(target, node, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function destroyEach(iterations, detach) {
	for (var i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d(detach);
	}
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function createComment() {
	return document.createComment('');
}

function addListener(node, event, handler, options) {
	node.addEventListener(event, handler, options);
}

function removeListener(node, event, handler, options) {
	node.removeEventListener(event, handler, options);
}

function setAttribute(node, attribute, value) {
	if (value == null) node.removeAttribute(attribute);
	else node.setAttribute(attribute, value);
}

function setData(text, data) {
	text.data = '' + data;
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = noop;

	this._fragment.d(detach !== false);
	this._fragment = null;
	this._state = {};
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		var handler = handlers[i];

		if (!handler.__calling) {
			try {
				handler.__calling = true;
				handler.call(this, data);
			} finally {
				handler.__calling = false;
			}
		}
	}
}

function flush(component) {
	component._lock = true;
	callAll(component._beforecreate);
	callAll(component._oncreate);
	callAll(component._aftercreate);
	component._lock = false;
}

function get() {
	return this._state;
}

function init(component, options) {
	component._handlers = blankObject();
	component._slots = blankObject();
	component._bind = options._bind;
	component._staged = {};

	component.options = options;
	component.root = options.root || component;
	component.store = options.store || component.root.store;

	if (!options.root) {
		component._beforecreate = [];
		component._oncreate = [];
		component._aftercreate = [];
	}
}

function on(eventName, handler) {
	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	flush(this.root);
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	newState = assign(this._staged, newState);
	this._staged = {};

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		this.fire("state", { changed: changed, current: this._state, previous: oldState });
		this._fragment.p(changed, this._state);
		this.fire("update", { changed: changed, current: this._state, previous: oldState });
	}
}

function _stage(newState) {
	assign(this._staged, newState);
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

var proto = {
	destroy,
	get,
	fire,
	on,
	set,
	_recompute: noop,
	_set,
	_stage,
	_mount,
	_differs
};

/* src/Item.svelte generated by Svelte v2.15.3 */

function create_main_fragment(component, ctx) {
	var div, raw_value = ctx.getOptionLabel(ctx.item);

	return {
		c() {
			div = createElement("div");
			div.className = "item";
		},

		m(target, anchor) {
			insert(target, div, anchor);
			div.innerHTML = raw_value;
		},

		p(changed, ctx) {
			if ((changed.getOptionLabel || changed.item) && raw_value !== (raw_value = ctx.getOptionLabel(ctx.item))) {
				div.innerHTML = raw_value;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}
		}
	};
}

function Item(options) {
	init(this, options);
	this._state = assign({}, options.data);
	this._intro = true;

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);
	}
}

assign(Item.prototype, proto);

/* src/List.svelte generated by Svelte v2.15.3 */

function data() {
  return {
    hoverItemIndex: 0,
    optionIdentifier: 'value',
    items: [],
    Item,
    selectedValue: undefined,
    getOptionLabel: (option) => option.label,
    noOptionsMessage: 'No options'
  }
}
function itemClasses(hoverItemIndex, item, itemIndex, items, selectedValue, optionIdentifier) {
  return `${selectedValue && (selectedValue[optionIdentifier] === item[optionIdentifier]) ? 'active ' : ''}${hoverItemIndex === itemIndex || items.length === 1 ? 'hover' : ''}`;
}
var methods = {
  handleSelect(item) {
    this.fire('itemSelected', item);
  },
  handleHover(i) {
    if(this.get().isScrolling) return;
    this.set({hoverItemIndex: i});
  },
  handleClick(item, i, event) {
    event.stopPropagation();
    this.set({activeItemIndex: i, hoverItemIndex: i});
    this.handleSelect(item);
  },
  updateHoverItem(increment) {
    let {items, hoverItemIndex} = this.get();

    if (increment > 0 && hoverItemIndex === (items.length - 1)) {
      hoverItemIndex = 0;
    }
    else if (increment < 0 && hoverItemIndex === 0) {
      hoverItemIndex = items.length - 1;
    }
    else {
      hoverItemIndex = hoverItemIndex + increment;
    }

    this.set({hoverItemIndex});
    this.scrollToActiveItem('hover');
  },
  handleKeyDown(e) {
    const {items, hoverItemIndex} = this.get();

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        items.length && this.updateHoverItem(1);
        break;
      case 'ArrowUp':
        e.preventDefault();
        items.length && this.updateHoverItem(-1);
        break;
      case 'Enter':
        e.preventDefault();
        this.set({activeItemIndex: hoverItemIndex});
        this.handleSelect(items[hoverItemIndex]);
        break;
      case 'Tab':
        e.preventDefault();
        this.set({activeItemIndex: hoverItemIndex});
        this.handleSelect(items[hoverItemIndex]);
        break;
    }
  },
  scrollToActiveItem(className) {
    const {container} = this.refs;
    let offsetBounding;
    const focusedElemBounding = container.querySelector(`.listItem.${className}`);

    if (focusedElemBounding) {
      offsetBounding = container.getBoundingClientRect().bottom - focusedElemBounding.getBoundingClientRect().bottom;
    }

    container.scrollTop -= offsetBounding;
  }
};

function oncreate() {
  this.isScrollingTimer = 0;

  this.refs.container.addEventListener('scroll', () => {
    clearTimeout(this.isScrollingTimer);

    this.set({
      isScrolling: true
    });

    this.isScrollingTimer = setTimeout(() => {
      this.set({
        isScrolling: false
      });
    }, 100);
  }, false);
}
function ondestroy() {
  clearTimeout(this.isScrollingTimer);
}
function onupdate({changed, current}) {
  if (changed.items && current.items.length > 0) {
    this.set({
        hoverItemIndex: 0
    });
  }
  if (changed.activeItemIndex && current.activeItemIndex > -1) {
    this.set({
      hoverItemIndex: current.activeItemIndex,
    });

    this.scrollToActiveItem('active');
  }
  if (changed.selectedValue && current.selectedValue) {
    this.scrollToActiveItem('active');

    if (current.items && !current.isMulti) {
      const hoverItemIndex = current.items.findIndex((item) => item[current.optionIdentifier] === current.selectedValue[current.optionIdentifier]);

      if (hoverItemIndex) {
        this.set({hoverItemIndex});
      }
    }
  }
}
function add_css() {
	var style = createElement("style");
	style.id = 'svelte-52qnu9-style';
	style.textContent = ".listContainer.svelte-52qnu9{box-shadow:0 2px 3px 0 rgba(44, 62, 80, 0.24);border-radius:4px;max-height:250px;overflow-y:auto;background:#fff}.listGroupTitle.svelte-52qnu9{color:#8f8f8f;cursor:default;font-size:12px;height:40px;line-height:40px;padding:0 20px;text-overflow:ellipsis;overflow-x:hidden;white-space:nowrap;text-transform:uppercase}.listItem.svelte-52qnu9{cursor:default;height:40px;line-height:40px;padding:0 20px;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.listItem.hover.svelte-52qnu9{background:#e7f2ff}.listItem.svelte-52qnu9:active{background:#b9daff}.listItem.svelte-52qnu9:first-child{border-radius:4px 4px 0 0}.listItem.active.svelte-52qnu9{background:#007aff;color:#fff;pointer-events:none}.empty.svelte-52qnu9{text-align:center;padding:20px 0;color:#78848F}";
	append(document.head, style);
}

function click_handler(event) {
	const { component, ctx } = this._svelte;

	component.handleClick(ctx.item, ctx.i, event);
}

function mouseover_handler(event) {
	const { component, ctx } = this._svelte;

	component.handleHover(ctx.i);
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.item = list[i];
	child_ctx.i = i;
	return child_ctx;
}

function create_main_fragment$1(component, ctx) {
	var div;

	function onwindowkeydown(event) {
		component.handleKeyDown(event);	}
	window.addEventListener("keydown", onwindowkeydown);

	var each_value = ctx.items;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
	}

	var each_else = null;

	if (!each_value.length) {
		each_else = create_else_block(component, ctx);
		each_else.c();
	}

	return {
		c() {
			div = createElement("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			div.className = "listContainer svelte-52qnu9";
		},

		m(target, anchor) {
			insert(target, div, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (each_else) {
				each_else.m(div, null);
			}

			component.refs.container = div;
		},

		p(changed, ctx) {
			if (changed.hoverItemIndex || changed.items || changed.selectedValue || changed.optionIdentifier || changed.Item || changed.getOptionLabel || changed.hideEmptyState || changed.noOptionsMessage) {
				each_value = ctx.items;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(component, child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}

			if (!each_value.length && each_else) {
				each_else.p(changed, ctx);
			} else if (!each_value.length) {
				each_else = create_else_block(component, ctx);
				each_else.c();
				each_else.m(div, null);
			} else if (each_else) {
				each_else.d(1);
				each_else = null;
			}
		},

		d(detach) {
			window.removeEventListener("keydown", onwindowkeydown);

			if (detach) {
				detachNode(div);
			}

			destroyEach(each_blocks, detach);

			if (each_else) each_else.d();

			if (component.refs.container === div) component.refs.container = null;
		}
	};
}

// (15:2) {:else}
function create_else_block(component, ctx) {
	var if_block_anchor;

	var if_block = (!ctx.hideEmptyState) && create_if_block_1(component, ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = createComment();
		},

		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p(changed, ctx) {
			if (!ctx.hideEmptyState) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block_1(component, ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d(detach) {
			if (if_block) if_block.d(detach);
			if (detach) {
				detachNode(if_block_anchor);
			}
		}
	};
}

// (16:4) {#if !hideEmptyState}
function create_if_block_1(component, ctx) {
	var div, text;

	return {
		c() {
			div = createElement("div");
			text = createText(ctx.noOptionsMessage);
			div.className = "empty svelte-52qnu9";
		},

		m(target, anchor) {
			insert(target, div, anchor);
			append(div, text);
		},

		p(changed, ctx) {
			if (changed.noOptionsMessage) {
				setData(text, ctx.noOptionsMessage);
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}
		}
	};
}

// (5:2) {#if item.groupValue}
function create_if_block(component, ctx) {
	var div, text_value = ctx.item.groupValue, text;

	return {
		c() {
			div = createElement("div");
			text = createText(text_value);
			div.className = "listGroupTitle svelte-52qnu9";
		},

		m(target, anchor) {
			insert(target, div, anchor);
			append(div, text);
		},

		p(changed, ctx) {
			if ((changed.items) && text_value !== (text_value = ctx.item.groupValue)) {
				setData(text, text_value);
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}
		}
	};
}

// (4:2) {#each items as item, i}
function create_each_block(component, ctx) {
	var text0, div, text1, div_class_value;

	var if_block = (ctx.item.groupValue) && create_if_block(component, ctx);

	var switch_value = ctx.Item;

	function switch_props(ctx) {
		var switch_instance_initial_data = {
		 	item: ctx.item,
		 	getOptionLabel: ctx.getOptionLabel
		 };
		return {
			root: component.root,
			store: component.store,
			data: switch_instance_initial_data
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (if_block) if_block.c();
			text0 = createText("\n\n  ");
			div = createElement("div");
			if (switch_instance) switch_instance._fragment.c();
			text1 = createText("\n  ");
			div._svelte = { component, ctx };

			addListener(div, "mouseover", mouseover_handler);
			addListener(div, "click", click_handler);
			div.className = div_class_value = "listItem " + itemClasses(ctx.hoverItemIndex, ctx.item, ctx.i, ctx.items, ctx.selectedValue, ctx.optionIdentifier) + " svelte-52qnu9";
		},

		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, text0, anchor);
			insert(target, div, anchor);

			if (switch_instance) {
				switch_instance._mount(div, null);
			}

			append(div, text1);
		},

		p(changed, _ctx) {
			ctx = _ctx;
			if (ctx.item.groupValue) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block(component, ctx);
					if_block.c();
					if_block.m(text0.parentNode, text0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			var switch_instance_changes = {};
			if (changed.items) switch_instance_changes.item = ctx.item;
			if (changed.getOptionLabel) switch_instance_changes.getOptionLabel = ctx.getOptionLabel;

			if (switch_value !== (switch_value = ctx.Item)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(div, text1);
				} else {
					switch_instance = null;
				}
			}

			else if (switch_value) {
				switch_instance._set(switch_instance_changes);
			}

			div._svelte.ctx = ctx;
			if ((changed.hoverItemIndex || changed.items || changed.selectedValue || changed.optionIdentifier) && div_class_value !== (div_class_value = "listItem " + itemClasses(ctx.hoverItemIndex, ctx.item, ctx.i, ctx.items, ctx.selectedValue, ctx.optionIdentifier) + " svelte-52qnu9")) {
				div.className = div_class_value;
			}
		},

		d(detach) {
			if (if_block) if_block.d(detach);
			if (detach) {
				detachNode(text0);
				detachNode(div);
			}

			if (switch_instance) switch_instance.destroy();
			removeListener(div, "mouseover", mouseover_handler);
			removeListener(div, "click", click_handler);
		}
	};
}

function List(options) {
	init(this, options);
	this.refs = {};
	this._state = assign(data(), options.data);
	this._intro = true;
	this._handlers.update = [onupdate];

	this._handlers.destroy = [ondestroy];

	if (!document.getElementById("svelte-52qnu9-style")) add_css();

	this._fragment = create_main_fragment$1(this, this._state);

	this.root._oncreate.push(() => {
		oncreate.call(this);
		this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
	});

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(List.prototype, proto);
assign(List.prototype, methods);

/* src/Selection.svelte generated by Svelte v2.15.3 */

function create_main_fragment$2(component, ctx) {
	var div, raw_value = ctx.getSelectionLabel(ctx.item);

	return {
		c() {
			div = createElement("div");
			div.className = "selection";
		},

		m(target, anchor) {
			insert(target, div, anchor);
			div.innerHTML = raw_value;
		},

		p(changed, ctx) {
			if ((changed.getSelectionLabel || changed.item) && raw_value !== (raw_value = ctx.getSelectionLabel(ctx.item))) {
				div.innerHTML = raw_value;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}
		}
	};
}

function Selection(options) {
	init(this, options);
	this._state = assign({}, options.data);
	this._intro = true;

	this._fragment = create_main_fragment$2(this, this._state);

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);
	}
}

assign(Selection.prototype, proto);

/* src/MultiSelection.svelte generated by Svelte v2.15.3 */

var methods$1 = {
  handleClear(i, event) {
    event.stopPropagation();
    this.fire('multiItemClear', {i});
  }
};

function add_css$1() {
	var style = createElement("style");
	style.id = 'svelte-hjmdgm-style';
	style.textContent = ".multiSelectItem.svelte-hjmdgm{background:#EBEDEF;margin-right:5px;border-radius:16px;line-height:32px;display:flex;cursor:default;height:32px;margin-top:5px;padding:0 10px 0 15px}.multiSelectItem_label.svelte-hjmdgm{margin-right:5px}.multiSelectItem_clear.svelte-hjmdgm{border-radius:0 4px 4px 0;width:20px;text-align:center}.multiSelectItem.svelte-hjmdgm:hover,.multiSelectItem.active.svelte-hjmdgm{background-color:#006FFF;color:#fff}.multiSelectItem.disabled.svelte-hjmdgm:hover{background:#EBEDEF;color:#C1C6CC}.multiSelectItem_clear.svelte-hjmdgm{border-radius:50%;background:#52616F;width:16px;height:16px;position:relative;top:8px;text-align:center;padding:1px}.multiSelectItem_clear.svelte-hjmdgm:hover,.active.svelte-hjmdgm .multiSelectItem_clear.svelte-hjmdgm{background:#fff}.multiSelectItem_clear.svelte-hjmdgm:hover svg.svelte-hjmdgm,.active.svelte-hjmdgm .multiSelectItem_clear svg.svelte-hjmdgm{fill:#006FFF}.multiSelectItem_clear.svelte-hjmdgm svg.svelte-hjmdgm{fill:#EBEDEF;vertical-align:top}";
	append(document.head, style);
}

function click_handler$1(event) {
	const { component, ctx } = this._svelte;

	component.handleClear(ctx.i, event);
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.value = list[i];
	child_ctx.i = i;
	return child_ctx;
}

function create_main_fragment$3(component, ctx) {
	var each_anchor;

	var each_value = ctx.selectedValue;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(component, get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_anchor = createComment();
		},

		m(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_anchor, anchor);
		},

		p(changed, ctx) {
			if (changed.activeSelectedValue || changed.isDisabled || changed.getSelectionLabel || changed.selectedValue) {
				each_value = ctx.selectedValue;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block$1(component, child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_anchor.parentNode, each_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		d(detach) {
			destroyEach(each_blocks, detach);

			if (detach) {
				detachNode(each_anchor);
			}
		}
	};
}

// (6:2) {#if !isDisabled}
function create_if_block$1(component, ctx) {
	var div;

	return {
		c() {
			div = createElement("div");
			div.innerHTML = `<svg width="100%" height="100%" viewBox="-2 -2 50 50" focusable="false" role="presentation" class="svelte-hjmdgm"><path d="M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z"></path></svg>`;
			div._svelte = { component, ctx };

			addListener(div, "click", click_handler$1);
			div.className = "multiSelectItem_clear svelte-hjmdgm";
		},

		m(target, anchor) {
			insert(target, div, anchor);
		},

		p(changed, _ctx) {
			ctx = _ctx;
			div._svelte.ctx = ctx;
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			removeListener(div, "click", click_handler$1);
		}
	};
}

// (1:0) {#each selectedValue as value, i}
function create_each_block$1(component, ctx) {
	var div1, div0, text0_value = ctx.getSelectionLabel(ctx.value), text0, text1, text2, div1_class_value;

	var if_block = (!ctx.isDisabled) && create_if_block$1(component, ctx);

	return {
		c() {
			div1 = createElement("div");
			div0 = createElement("div");
			text0 = createText(text0_value);
			text1 = createText("\n  ");
			if (if_block) if_block.c();
			text2 = createText("\n");
			div0.className = "multiSelectItem_label svelte-hjmdgm";
			div1.className = div1_class_value = "multiSelectItem " + (ctx.activeSelectedValue === ctx.i ? 'active' : '') + " " + (ctx.isDisabled ? 'disabled' : '') + " svelte-hjmdgm";
		},

		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, text0);
			append(div1, text1);
			if (if_block) if_block.m(div1, null);
			append(div1, text2);
		},

		p(changed, ctx) {
			if ((changed.getSelectionLabel || changed.selectedValue) && text0_value !== (text0_value = ctx.getSelectionLabel(ctx.value))) {
				setData(text0, text0_value);
			}

			if (!ctx.isDisabled) {
				if (!if_block) {
					if_block = create_if_block$1(component, ctx);
					if_block.c();
					if_block.m(div1, text2);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if ((changed.activeSelectedValue || changed.isDisabled) && div1_class_value !== (div1_class_value = "multiSelectItem " + (ctx.activeSelectedValue === ctx.i ? 'active' : '') + " " + (ctx.isDisabled ? 'disabled' : '') + " svelte-hjmdgm")) {
				div1.className = div1_class_value;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div1);
			}

			if (if_block) if_block.d();
		}
	};
}

function MultiSelection(options) {
	init(this, options);
	this._state = assign({}, options.data);
	this._intro = true;

	if (!document.getElementById("svelte-hjmdgm-style")) add_css$1();

	this._fragment = create_main_fragment$3(this, this._state);

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);
	}
}

assign(MultiSelection.prototype, proto);
assign(MultiSelection.prototype, methods$1);

/* src/Select.svelte generated by Svelte v2.15.3 */



function containerClasses({isMulti, isDisabled, isFocused}) {
  let classes = `selectContainer`;
  classes += isMulti ? ' multiSelect' : '';
  classes += isDisabled ? ' disabled' : '';
  classes += isFocused ? ' focused' : '';

  return classes;
}
function showSelectedItem({selectedValue, filterText}) {
  return selectedValue && filterText.length === 0;
}
function placeholderText({selectedValue, placeholder}) {
  return selectedValue ? '' : placeholder
}
function filteredItems({items, filterText, groupBy, groupFilter, getOptionLabel, isMulti, selectedValue, optionIdentifier, loadOptions}) {
  const filteredItems = loadOptions ? items : items.filter(item => {
    let keepItem = true;

    if (isMulti && selectedValue) {
      keepItem = !selectedValue.find(({value}) => {
        return value === item[optionIdentifier]
      });
    }

    if (keepItem && filterText.length < 1) return true;
    return keepItem && getOptionLabel(item).toLowerCase().includes(filterText.toLowerCase());
  });

  if (groupBy) {
    const groupValues = [];
    const groups = {};

    filteredItems.forEach((item) => {
      const groupValue = groupBy(item);

      if (!groupValues.includes(groupValue)) {
        groupValues.push(groupValue);
        groups[groupValue] = [];
        groups[groupValue].push(Object.assign({groupValue}, item));
      } else {
        groups[groupValue].push(Object.assign({}, item));
      }

      groups[groupValue].push();
    });

    const sortedGroupedItems = [];

    groupFilter(groupValues).forEach((groupValue) => {
      sortedGroupedItems.push(...groups[groupValue]);
    });

    return sortedGroupedItems;
  }

  return filteredItems;
}
function data$1() {
  return {
    containerStyles: undefined,
    Item,
    Selection,
    MultiSelection,
    items: [],
    filterText: '',
    placeholder: 'Select...',
    listOpen: false,
    list: undefined,
    target: undefined,
    selectedValue: undefined,
    activeSelectedValue: undefined,
    isClearable: true,
    isMulti: false,
    isSearchable: true,
    isDisabled: false,
    optionIdentifier: 'value',
    groupBy: undefined,
    loadOptions: undefined,
    loadOptionsInterval: 200,
    noOptionsMessage: 'No options',
    hideEmptyState: false,
    groupFilter: (groups) => groups,
    getOptionLabel: (option) => option.label,
    getSelectionLabel: (option) => option.label,
  }
}
var methods$2 = {
  handleMultiItemClear(i) {
    const {selectedValue} = this.get();
    selectedValue.splice(i, 1);
    this.set({selectedValue: selectedValue.length > 0 ? selectedValue : undefined});
    this.getPosition();
  },
  getPosition() {
    const {target} = this.get();
    if (!target) return;
    const {top, height, width} = this.refs.container.getBoundingClientRect();
    target.style.top = `${height + 5}px`;
    target.style.width = `${width}px`;
    target.style.left = '0';
    this.set({target});
  },
  handleKeyDown(e) {
    let {isFocused, listOpen, selectedValue, filterText, isMulti, activeSelectedValue, list} = this.get();
    if (!isFocused) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        this.set({listOpen: true, activeSelectedValue: undefined});
        break;
      case 'ArrowUp':
        e.preventDefault();
        this.set({listOpen: true, activeSelectedValue: undefined});
        break;
      case 'Tab':
        if (!listOpen) this.set({isFocused: false});
        break;
      case 'Backspace':
        if (!isMulti || filterText.length > 0) return;
        this.handleMultiItemClear(activeSelectedValue !== undefined ? activeSelectedValue : selectedValue.length - 1);
        if (activeSelectedValue === 0) break;
        this.set({activeSelectedValue: selectedValue.length > activeSelectedValue ? activeSelectedValue - 1 : undefined });
        break;
      case 'ArrowLeft':
        if (list) list.set({ hoverItemIndex: -1});  
        if (!isMulti || filterText.length > 0) return;

        if (activeSelectedValue === undefined) {
          activeSelectedValue = selectedValue.length - 1;
        } else if (selectedValue.length > activeSelectedValue && activeSelectedValue !== 0) {
          activeSelectedValue -= 1;
        }
        this.set({activeSelectedValue});
        break;
      case 'ArrowRight':
        if (list) list.set({ hoverItemIndex: -1});
        if (!isMulti || filterText.length > 0 || activeSelectedValue === undefined) return;
        if (activeSelectedValue === selectedValue.length - 1) {
          activeSelectedValue = undefined;
        } else if (activeSelectedValue < selectedValue.length - 1) {
          activeSelectedValue += 1;
        }
        this.set({activeSelectedValue});
        break;
    }
  },
  handleFocus() {
    this.set({isFocused: true});
    if (this.refs.input) this.refs.input.focus();
  },
  removeList() {
    let {list, target} = this.get();
    this.set({filterText: '', activeSelectedValue: undefined});

    if (!list) return;
    list.destroy();
    list = undefined;

    if (!target) return;
    target.parentNode.removeChild(target);
    target = undefined;

    this.set({list, target});
  },
  handleWindowClick(event) {
    if (!this.refs.container) return;
    if (this.refs.container.contains(event.target)) return;
    this.set({isFocused: false, listOpen: false, activeSelectedValue: undefined});
    if (this.refs.input) this.refs.input.blur();
  },
  handleClick() {
    const {isDisabled, listOpen} = this.get();
    if (isDisabled) return;
    this.set({isFocused: true, listOpen: !listOpen});
  },
  handleClear(e) {
    e.stopPropagation();
    this.set({selectedValue: undefined, listOpen: false});
    this.handleFocus();
    this.fire('clear');
  },
  loadList() {
    let {target, list, Item: Item$$1, getOptionLabel, optionIdentifier, noOptionsMessage, hideEmptyState, items, selectedValue, filteredItems, isMulti} = this.get();
    if (target && list) return;

    const data = {Item: Item$$1, optionIdentifier, noOptionsMessage, hideEmptyState};

    if (getOptionLabel) {
      data.getOptionLabel = getOptionLabel;
    }

    target = document.createElement('div');

    Object.assign(target.style, {
      position: 'absolute',
      'z-index': 2
    });

    this.set({list, target});
    this.getPosition();
    this.refs.container.appendChild(target);

    list = new List({
      target,
      data
    });

    if (items) {
      list.set({items: filteredItems, selectedValue, isMulti});
    }

    list.on('itemSelected', (newSelection) => {
      if (newSelection) {
        const item = Object.assign({}, newSelection);

        if (isMulti) {
          selectedValue = selectedValue ? selectedValue.concat([item]) : [item];
        } else {
          selectedValue = item;
        }

        this.set({
          selectedValue,
          listOpen: false,
          activeSelectedValue: undefined
        });
      }
    });

    this.set({list, target});
  }
};

function oncreate$1() {
  const {isFocused,listOpen} = this.get();
  this.loadOptionsTimeout = undefined;

  if (isFocused) this.refs.input.focus();
  if (listOpen) this.loadList();
}
function ondestroy$1() {
  this.removeList();
}
function onstate({changed, current, previous}) {
  if (!previous) return;

  if (changed.selectedValue && current.selectedValue) {
    if (!previous.selectedValue || current.selectedValue[current.optionIdentifier] != previous.selectedValue[current.optionIdentifier])
      this.fire('select', current.selectedValue);
  }

  if (changed.listOpen) {
    if (current.listOpen) {
      this.loadList();
    } else {
      this.removeList();
    }
  }

  if (changed.filterText) {
    if(current.loadOptions) {
      clearTimeout(this.loadOptionsTimeout);
      this.set({isWaiting:true});

      this.loadOptionsTimeout = setTimeout(() => {
        if(current.filterText) {
          current.loadOptions(current.filterText).then((response) => {
            this.set({ items: response });
          });
        } else {
          this.set({ items: [] });
        }

        this.set({isWaiting:false});
        this.set({listOpen: true});
      }, current.loadOptionsInterval);
    } else {
      this.loadList();
      this.set({listOpen: true});

      if (current.isMulti) {
        this.set({activeSelectedValue: undefined});
      }
    }
  }

  if (changed.isFocused) {
    const {isFocused} = current;
    if (isFocused) {
      this.handleFocus();
    } else {
      this.set({filterText: ''});
    }
  }

  if (changed.filteredItems && current.list) {
    current.list.set({items: current.filteredItems});
  }
}
function add_css$2() {
	var style = createElement("style");
	style.id = 'svelte-hw8jyz-style';
	style.textContent = ".selectContainer.svelte-hw8jyz{border:1px solid #D8DBDF;border-radius:3px;height:44px;position:relative;display:flex;padding:0 16px;background:#fff}.selectContainer.svelte-hw8jyz input.svelte-hw8jyz{cursor:default;border:none;color:#3F4F5F;height:42px;line-height:42px;padding:0 16px;width:100%;background:transparent;font-size:14px;letter-spacing:-0.08px;position:absolute;left:0}.selectContainer.svelte-hw8jyz input.svelte-hw8jyz::placeholder{color:#78848F}.selectContainer.svelte-hw8jyz input.svelte-hw8jyz:focus{outline:none}.selectContainer.svelte-hw8jyz:hover{border-color:#b2b8bf}.selectContainer.focused.svelte-hw8jyz{border-color:#006FE8}.selectContainer.disabled.svelte-hw8jyz{background:#F6F7F8;border-color:#F6F7F8;color:#C1C6CC}.selectContainer.disabled.svelte-hw8jyz input.svelte-hw8jyz::placeholder{color:#C1C6CC}.selectedItem.svelte-hw8jyz{line-height:42px;height:42px;text-overflow:ellipsis;overflow-x:hidden;white-space:nowrap;padding-right:20px}.selectedItem.svelte-hw8jyz:focus{outline:none}.clearSelect.svelte-hw8jyz{position:absolute;right:10px;top:11px;bottom:11px;width:20px;color:#c5cacf;flex:none !important}.clearSelect.svelte-hw8jyz:hover{color:#2c3e50}.selectContainer.focused.svelte-hw8jyz .clearSelect.svelte-hw8jyz{color:#3F4F5F}.indicator.svelte-hw8jyz{position:absolute;right:10px;top:11px;width:20px;height:20px;color:#c5cacf}.indicator.svelte-hw8jyz svg.svelte-hw8jyz{display:inline-block;fill:currentcolor;line-height:1;stroke:currentcolor;stroke-width:0}.spinner.svelte-hw8jyz{position:absolute;right:10px;top:11px;width:20px;height:20px;color:#51ce6c;animation:svelte-hw8jyz-rotate 0.75s linear infinite}.spinner_icon.svelte-hw8jyz{display:block;height:100%;transform-origin:center center;width:100%;position:absolute;top:0;bottom:0;left:0;right:0;margin:auto;-webkit-transform:none}.spinner_path.svelte-hw8jyz{stroke-dasharray:90;stroke-linecap:round}.multiSelect.svelte-hw8jyz{display:flex;padding:0 35px 0 16px;height:auto;flex-wrap:wrap}.multiSelect.svelte-hw8jyz>.svelte-hw8jyz{flex:1 1 50px}.selectContainer.multiSelect.svelte-hw8jyz input.svelte-hw8jyz{padding:0;position:relative}@keyframes svelte-hw8jyz-rotate{100%{transform:rotate(360deg)}}";
	append(document.head, style);
}

function create_main_fragment$4(component, ctx) {
	var div, text0, input, input_updating = false, input_readonly_value, text1, text2, text3, text4;

	function onwindowclick(event) {
		component.handleWindowClick(event);	}
	window.addEventListener("click", onwindowclick);

	function onwindowkeydown(event) {
		component.handleKeyDown(event);	}
	window.addEventListener("keydown", onwindowkeydown);

	function onwindowresize(event) {
		component.getPosition();	}
	window.addEventListener("resize", onwindowresize);

	var if_block0 = (ctx.isMulti && ctx.selectedValue && ctx.selectedValue.length > 0) && create_if_block_4(component, ctx);

	function input_input_handler() {
		input_updating = true;
		component.set({ filterText: input.value });
		input_updating = false;
	}

	function focus_handler(event) {
		component.handleFocus();
	}

	var if_block1 = (!ctx.isMulti && ctx.showSelectedItem) && create_if_block_3(component, ctx);

	var if_block2 = (ctx.showSelectedItem && ctx.isClearable && !ctx.isDisabled && !ctx.isWaiting) && create_if_block_2(component, ctx);

	var if_block3 = (!ctx.isSearchable && !ctx.isDisabled && !ctx.isWaiting && (ctx.showSelectedItem && !ctx.isClearable || !ctx.showSelectedItem)) && create_if_block_1$1(component, ctx);

	var if_block4 = (ctx.isWaiting) && create_if_block$2(component, ctx);

	function click_handler(event) {
		component.handleClick();
	}

	return {
		c() {
			div = createElement("div");
			if (if_block0) if_block0.c();
			text0 = createText("\n\n  ");
			input = createElement("input");
			text1 = createText("\n\n  ");
			if (if_block1) if_block1.c();
			text2 = createText("\n\n  ");
			if (if_block2) if_block2.c();
			text3 = createText("\n\n  ");
			if (if_block3) if_block3.c();
			text4 = createText("\n\n  ");
			if (if_block4) if_block4.c();
			addListener(input, "input", input_input_handler);
			addListener(input, "focus", focus_handler);
			input.readOnly = input_readonly_value = !ctx.isSearchable;
			input.autocomplete = "off";
			setAttribute(input, "autocorrect", "off");
			input.spellcheck = "false";
			input.placeholder = ctx.placeholderText;
			input.disabled = ctx.isDisabled;
			input.style.cssText = ctx.inputStyles;
			input.className = "svelte-hw8jyz";
			addListener(div, "click", click_handler);
			div.className = "" + ctx.containerClasses + " svelte-hw8jyz";
			div.style.cssText = ctx.containerStyles;
		},

		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, text0);
			append(div, input);
			component.refs.input = input;

			input.value = ctx.filterText;

			append(div, text1);
			if (if_block1) if_block1.m(div, null);
			append(div, text2);
			if (if_block2) if_block2.m(div, null);
			append(div, text3);
			if (if_block3) if_block3.m(div, null);
			append(div, text4);
			if (if_block4) if_block4.m(div, null);
			component.refs.container = div;
		},

		p(changed, ctx) {
			if (ctx.isMulti && ctx.selectedValue && ctx.selectedValue.length > 0) {
				if (if_block0) {
					if_block0.p(changed, ctx);
				} else {
					if_block0 = create_if_block_4(component, ctx);
					if_block0.c();
					if_block0.m(div, text0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!input_updating && changed.filterText) input.value = ctx.filterText;
			if ((changed.isSearchable) && input_readonly_value !== (input_readonly_value = !ctx.isSearchable)) {
				input.readOnly = input_readonly_value;
			}

			if (changed.placeholderText) {
				input.placeholder = ctx.placeholderText;
			}

			if (changed.isDisabled) {
				input.disabled = ctx.isDisabled;
			}

			if (changed.inputStyles) {
				input.style.cssText = ctx.inputStyles;
			}

			if (!ctx.isMulti && ctx.showSelectedItem) {
				if (if_block1) {
					if_block1.p(changed, ctx);
				} else {
					if_block1 = create_if_block_3(component, ctx);
					if_block1.c();
					if_block1.m(div, text2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (ctx.showSelectedItem && ctx.isClearable && !ctx.isDisabled && !ctx.isWaiting) {
				if (!if_block2) {
					if_block2 = create_if_block_2(component, ctx);
					if_block2.c();
					if_block2.m(div, text3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (!ctx.isSearchable && !ctx.isDisabled && !ctx.isWaiting && (ctx.showSelectedItem && !ctx.isClearable || !ctx.showSelectedItem)) {
				if (!if_block3) {
					if_block3 = create_if_block_1$1(component, ctx);
					if_block3.c();
					if_block3.m(div, text4);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (ctx.isWaiting) {
				if (!if_block4) {
					if_block4 = create_if_block$2(component, ctx);
					if_block4.c();
					if_block4.m(div, null);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (changed.containerClasses) {
				div.className = "" + ctx.containerClasses + " svelte-hw8jyz";
			}

			if (changed.containerStyles) {
				div.style.cssText = ctx.containerStyles;
			}
		},

		d(detach) {
			window.removeEventListener("click", onwindowclick);

			window.removeEventListener("keydown", onwindowkeydown);

			window.removeEventListener("resize", onwindowresize);

			if (detach) {
				detachNode(div);
			}

			if (if_block0) if_block0.d();
			removeListener(input, "input", input_input_handler);
			removeListener(input, "focus", focus_handler);
			if (component.refs.input === input) component.refs.input = null;
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			removeListener(div, "click", click_handler);
			if (component.refs.container === div) component.refs.container = null;
		}
	};
}

// (13:2) {#if isMulti && selectedValue && selectedValue.length > 0}
function create_if_block_4(component, ctx) {
	var switch_instance_anchor;

	var switch_value = ctx.MultiSelection;

	function switch_props(ctx) {
		var switch_instance_initial_data = {
		 	selectedValue: ctx.selectedValue,
		 	getSelectionLabel: ctx.getSelectionLabel,
		 	activeSelectedValue: ctx.activeSelectedValue,
		 	isDisabled: ctx.isDisabled
		 };
		return {
			root: component.root,
			store: component.store,
			data: switch_instance_initial_data
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	function switch_instance_multiItemClear(event) {
		component.handleMultiItemClear(event.i);
	}

	if (switch_instance) switch_instance.on("multiItemClear", switch_instance_multiItemClear);
	function switch_instance_focus(event) {
		component.handleFocus();
	}

	if (switch_instance) switch_instance.on("focus", switch_instance_focus);

	return {
		c() {
			if (switch_instance) switch_instance._fragment.c();
			switch_instance_anchor = createComment();
		},

		m(target, anchor) {
			if (switch_instance) {
				switch_instance._mount(target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
		},

		p(changed, ctx) {
			var switch_instance_changes = {};
			if (changed.selectedValue) switch_instance_changes.selectedValue = ctx.selectedValue;
			if (changed.getSelectionLabel) switch_instance_changes.getSelectionLabel = ctx.getSelectionLabel;
			if (changed.activeSelectedValue) switch_instance_changes.activeSelectedValue = ctx.activeSelectedValue;
			if (changed.isDisabled) switch_instance_changes.isDisabled = ctx.isDisabled;

			if (switch_value !== (switch_value = ctx.MultiSelection)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(switch_instance_anchor.parentNode, switch_instance_anchor);

					switch_instance.on("multiItemClear", switch_instance_multiItemClear);
					switch_instance.on("focus", switch_instance_focus);
				} else {
					switch_instance = null;
				}
			}

			else if (switch_value) {
				switch_instance._set(switch_instance_changes);
			}
		},

		d(detach) {
			if (detach) {
				detachNode(switch_instance_anchor);
			}

			if (switch_instance) switch_instance.destroy(detach);
		}
	};
}

// (38:2) {#if !isMulti && showSelectedItem }
function create_if_block_3(component, ctx) {
	var div;

	var switch_value = ctx.Selection;

	function switch_props(ctx) {
		var switch_instance_initial_data = {
		 	item: ctx.selectedValue,
		 	getSelectionLabel: ctx.getSelectionLabel
		 };
		return {
			root: component.root,
			store: component.store,
			data: switch_instance_initial_data
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	function focus_handler(event) {
		component.handleFocus();
	}

	return {
		c() {
			div = createElement("div");
			if (switch_instance) switch_instance._fragment.c();
			addListener(div, "focus", focus_handler);
			div.className = "selectedItem svelte-hw8jyz";
		},

		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				switch_instance._mount(div, null);
			}
		},

		p(changed, ctx) {
			var switch_instance_changes = {};
			if (changed.selectedValue) switch_instance_changes.item = ctx.selectedValue;
			if (changed.getSelectionLabel) switch_instance_changes.getSelectionLabel = ctx.getSelectionLabel;

			if (switch_value !== (switch_value = ctx.Selection)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(div, null);
				} else {
					switch_instance = null;
				}
			}

			else if (switch_value) {
				switch_instance._set(switch_instance_changes);
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			if (switch_instance) switch_instance.destroy();
			removeListener(div, "focus", focus_handler);
		}
	};
}

// (44:2) {#if showSelectedItem && isClearable && !isDisabled && !isWaiting}
function create_if_block_2(component, ctx) {
	var div;

	function click_handler(event) {
		component.handleClear(event);
	}

	return {
		c() {
			div = createElement("div");
			div.innerHTML = `<svg width="100%" height="100%" viewBox="-2 -2 50 50" focusable="false" role="presentation" class="svelte-hw8jyz"><path fill="currentColor" d="M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z"></path></svg>`;
			addListener(div, "click", click_handler);
			div.className = "clearSelect svelte-hw8jyz";
		},

		m(target, anchor) {
			insert(target, div, anchor);
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			removeListener(div, "click", click_handler);
		}
	};
}

// (54:2) {#if !isSearchable && !isDisabled && !isWaiting && (showSelectedItem && !isClearable || !showSelectedItem)}
function create_if_block_1$1(component, ctx) {
	var div;

	return {
		c() {
			div = createElement("div");
			div.innerHTML = `<svg width="100%" height="100%" viewBox="0 0 20 20" focusable="false" class="css-19bqh2r svelte-hw8jyz"><path d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"></path></svg>`;
			div.className = "indicator svelte-hw8jyz";
		},

		m(target, anchor) {
			insert(target, div, anchor);
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}
		}
	};
}

// (63:2) {#if isWaiting}
function create_if_block$2(component, ctx) {
	var div;

	return {
		c() {
			div = createElement("div");
			div.innerHTML = `<svg class="spinner_icon svelte-hw8jyz" viewBox="25 25 50 50"><circle class="spinner_path svelte-hw8jyz" cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="5" stroke-miterlimit="10"></circle></svg>`;
			div.className = "spinner svelte-hw8jyz";
		},

		m(target, anchor) {
			insert(target, div, anchor);
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}
		}
	};
}

function Select(options) {
	init(this, options);
	this.refs = {};
	this._state = assign(data$1(), options.data);

	this._recompute({ isMulti: 1, isDisabled: 1, isFocused: 1, selectedValue: 1, filterText: 1, placeholder: 1, items: 1, groupBy: 1, groupFilter: 1, getOptionLabel: 1, optionIdentifier: 1, loadOptions: 1 }, this._state);
	this._intro = true;

	this._handlers.state = [onstate];

	this._handlers.destroy = [ondestroy$1];

	if (!document.getElementById("svelte-hw8jyz-style")) add_css$2();

	onstate.call(this, { changed: assignTrue({}, this._state), current: this._state });

	this._fragment = create_main_fragment$4(this, this._state);

	this.root._oncreate.push(() => {
		oncreate$1.call(this);
		this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
	});

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(Select.prototype, proto);
assign(Select.prototype, methods$2);

Select.prototype._recompute = function _recompute(changed, state) {
	if (changed.isMulti || changed.isDisabled || changed.isFocused) {
		if (this._differs(state.containerClasses, (state.containerClasses = containerClasses(state)))) changed.containerClasses = true;
	}

	if (changed.selectedValue || changed.filterText) {
		if (this._differs(state.showSelectedItem, (state.showSelectedItem = showSelectedItem(state)))) changed.showSelectedItem = true;
	}

	if (changed.selectedValue || changed.placeholder) {
		if (this._differs(state.placeholderText, (state.placeholderText = placeholderText(state)))) changed.placeholderText = true;
	}

	if (changed.items || changed.filterText || changed.groupBy || changed.groupFilter || changed.getOptionLabel || changed.isMulti || changed.selectedValue || changed.optionIdentifier || changed.loadOptions) {
		if (this._differs(state.filteredItems, (state.filteredItems = filteredItems(state)))) changed.filteredItems = true;
	}
};

export default Select;
